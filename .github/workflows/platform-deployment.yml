name: NutriFit Platform CI/CD

# ===============================================
# Platform-Level Multi-Service Deployment
# ===============================================

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# ====================================
# Environment Variables
# ====================================
env:
  DOCKER_REGISTRY: ghcr.io
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'

# ====================================
# Permissions
# ====================================
permissions:
  contents: write
  packages: write
  id-token: write

# ====================================
# Jobs
# ====================================
jobs:
  # ====================================
  # Detect Changed Services
  # ====================================
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      user-management: ${{ steps.changes.outputs.user-management }}
      calorie-balance: ${{ steps.changes.outputs.calorie-balance }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect service changes
        id: changes
        run: |
          echo "Detecting changes in services..."
          
          # Initialize services array
          services="[]"
          
          # Check user-management service
          if git diff --name-only HEAD~1 HEAD | grep -q "^services/user-management/"; then
            echo "user-management=true" >> $GITHUB_OUTPUT
            services=$(echo "$services" | jq -c '. + ["user-management"]')
            echo "âœ… user-management service changed"
          else
            echo "user-management=false" >> $GITHUB_OUTPUT
          fi
          
          # Check calorie-balance service
          if git diff --name-only HEAD~1 HEAD | grep -q "^services/calorie-balance/"; then
            echo "calorie-balance=true" >> $GITHUB_OUTPUT
            services=$(echo "$services" | jq -c '. + ["calorie-balance"]')
            echo "âœ… calorie-balance service changed"
          else
            echo "calorie-balance=false" >> $GITHUB_OUTPUT
          fi
          
          # Force deploy on workflow dispatch or if platform files changed
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || \
             git diff --name-only HEAD~1 HEAD | grep -q -E "(render.yaml|\.github/workflows/)"; then
            services='["user-management","calorie-balance"]'
            echo "user-management=true" >> $GITHUB_OUTPUT
            echo "calorie-balance=true" >> $GITHUB_OUTPUT
            echo "ðŸš€ Force deploy all services"
          fi
          
          echo "services=$services" >> $GITHUB_OUTPUT
          echo "Services to process: $services"

  # ====================================
  # Test User Management
  # ====================================
  test-user-management:
    name: Test User Management
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.user-management == 'true'
    
    defaults:
      run:
        working-directory: services/user-management
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: services/user-management/.venv
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('services/user-management/poetry.lock') }}
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Run linting
        run: |
          poetry run black --check .
          poetry run isort --check-only .
          poetry run flake8 .
      
      - name: Run tests
        run: poetry run pytest -v

  # ====================================
  # Build Docker Images
  # ====================================
  build-user-management:
    name: Build User Management
    runs-on: ubuntu-latest
    needs: [detect-changes, test-user-management]
    if: needs.detect-changes.outputs.user-management == 'true'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/gymbro-platform-user-management
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: services/user-management
          file: services/user-management/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ====================================
  # Deploy to Staging
  # ====================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [detect-changes, build-user-management]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://nutrifit-staging.onrender.com
    
    steps:
      - name: Deploy to Render (Staging)
        run: |
          echo "ðŸš€ Deploying to Render Staging..."
          echo "Using API Key: ${RENDER_API_KEY:0:10}..." # Debug: mostra primi 10 caratteri
          response=$(curl -X POST \
            "https://api.render.com/v1/services/${{ secrets.RENDER_STAGING_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{}')
          echo "Deploy triggered: $response"
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

  # ====================================
  # Deploy to Production
  # ====================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [detect-changes, build-user-management]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://nutrifit.onrender.com
    
    steps:
      - name: Deploy to Render (Production)
        run: |
          echo "ðŸš€ Deploying to Render Production..."
          echo "Using API Key: ${RENDER_API_KEY:0:10}..." # Debug: mostra primi 10 caratteri
          response=$(curl -X POST \
            "https://api.render.com/v1/services/${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{}')
          echo "Deploy triggered: $response"
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: platform-v${{ github.run_number }}
          name: NutriFit Platform v${{ github.run_number }}
          body: |
            ## Platform Release
            
            ### Services Updated
            - User Management Service
            
            ### Deploy Information
            - Environment: Production
            - Docker Image: ghcr.io/giamma80/nutrifit-user-management:main
            - Render Service: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}
            
            **Deployed Services**: ${{ needs.detect-changes.outputs.services }}
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ github.ref_name }}
            
            ### Changes
            - Automated platform deployment
            - Multi-service orchestration
            - Docker images built and deployed
          draft: false
          prerelease: false
          generate_release_notes: true
