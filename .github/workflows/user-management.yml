name: User Management Service CI/CD

# ===============================================
# User Management Service - CI/CD Pipeline
# ===============================================
# Automated testing, building, and deployment

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/user-management/**'
      - '.github/workflows/user-management.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'services/user-management/**'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# ====================================
# Environment Variables
# ====================================
env:
  WORKING_DIR: services/user-management
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: gymbro-platform/user-management

# ====================================
# Jobs
# ====================================
jobs:
  # ====================================
  # Code Quality & Testing
  # ====================================
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/.venv
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
      
      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-ansi
      
      - name: Run code formatting check (Black)
        run: |
          poetry run black --check .
      
      - name: Run import sorting check (isort)
        run: |
          poetry run isort --check-only .
      
      - name: Run linting (flake8)
        run: |
          poetry run flake8 .
      
      - name: Run type checking (mypy)
        run: |
          poetry run mypy .
      
      - name: Run security checks (bandit)
        run: |
          poetry run bandit -r app/ -f json -o bandit-report.json || true
      
      - name: Run dependency vulnerability check (safety)
        run: |
          poetry run safety check --json --output safety-report.json || true
      
      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          JWT_SECRET_KEY: test-jwt-secret
          ENVIRONMENT: testing
        run: |
          # Create test database schema
          poetry run python -c "
          import asyncio
          from app.core.database import create_database_schema
          asyncio.run(create_database_schema())
          "
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          JWT_SECRET_KEY: test-jwt-secret
          ENVIRONMENT: testing
        run: |
          poetry run pytest \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=pytest-report.xml \
            -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ env.WORKING_DIR }}/coverage.xml
          flags: user-management
          name: user-management-coverage
          fail_ci_if_error: false
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ${{ env.WORKING_DIR }}/pytest-report.xml
            ${{ env.WORKING_DIR }}/htmlcov/
            ${{ env.WORKING_DIR }}/bandit-report.json
            ${{ env.WORKING_DIR }}/safety-report.json

  # ====================================
  # Docker Build & Push
  # ====================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIR }}
          file: ${{ env.WORKING_DIR }}/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # ====================================
  # Security Scanning
  # ====================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ====================================
  # Deploy to Staging
  # ====================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging')
    environment:
      name: staging
      url: https://nutrifit-user-management-staging.onrender.com
    
    steps:
      - name: Deploy to Render (Staging)
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

  # ====================================
  # Deploy to Production
  # ====================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production')
    environment:
      name: production
      url: https://nutrifit-user-management.onrender.com
    
    steps:
      - name: Deploy to Render (Production)
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true
      
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: user-management-v${{ github.run_number }}
          release_name: User Management Service v${{ github.run_number }}
          body: |
            ## User Management Service Release
            
            **Deployed to Production**: ${{ github.sha }}
            
            ### Changes
            - Automated deployment from main branch
            - Image: ${{ needs.build.outputs.image-tag }}
            - Digest: ${{ needs.build.outputs.image-digest }}
            
            ### Verification
            - All tests passed ✅
            - Security scan completed ✅
            - Docker image built and pushed ✅
          draft: false
          prerelease: false

  # ====================================
  # Notifications
  # ====================================
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            User Management Service deployment completed
            Environment: ${{ needs.deploy-staging.result != 'skipped' && 'staging' || 'production' }}
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
