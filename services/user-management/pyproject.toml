[tool.poetry]
name = "nutrifit-user-management"
version = "1.0.0"
description = "NutriFit user-management microservice with Supabase Client"
authors = ["NutriFit Team <dev@nutrifit.app>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"

# FastAPI framework
fastapi = "^0.100.0"
uvicorn = {extras = ["standard"], version = "^0.23.0"}
gunicorn = "^21.2.0"

# GraphQL and Federation
strawberry-graphql = {extras = ["fastapi"], version = "^0.209.0"}

# Supabase integration
postgrest = "^0.16.0"

# Data validation and serialization
pydantic = {extras = ["email"], version = "^2.3.0"}
pydantic-settings = "^2.0.0"

# HTTP client (compatibile con postgrest)
httpx = "^0.24.0"

# Logging and monitoring
structlog = "^23.1.0"

# Security (for user management we need these)
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"

# Environment management
python-dotenv = "^1.0.0"

# Background tasks (optional)
celery = {version = "^5.3.0", optional = true}
redis = {version = "^4.6.0", optional = true}
supabase = "2.6.0"
gotrue = "2.4.2"
requests = "^2.32.5"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
factory-boy = "^3.3.0"

# Code quality
black = "^23.7.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"

# Development tools
pre-commit = "^3.4.0"
requests = "^2.32.5"

[tool.poetry.extras]
background = ["celery", "redis"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--cov=app --cov-report=term-missing --cov-fail-under=0 --asyncio-mode=auto"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = ["tests/*"]
